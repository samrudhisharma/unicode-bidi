# BidiTest-8.0.0.txt
# Date: 2014-12-16, 23:07:28 GMT [MD]
#
# Unicode Character Database
# Copyright (c) 1991-2014 Unicode, Inc.
# For terms of use, see http://www.unicode.org/terms_of_use.html
# For documentation, see http://www.unicode.org/reports/tr44/
#
# This file provides a conformance test for UBA (Unicode Bidi Algorithm) implementations.
# It is designed to be reasonably compact, and yet provide a thorough test of all cases up to
# a given limit (currently 4). Additionally, it contains some longer cases useful for testing
# some common pitfalls of UBA implementations.
#
# Note that for the test cases in this file, it is assumed that no bidi
# paired brackets exist in the input that would affect the resolved levels
# or reordering. For test cases with bidi paired brackets and other
# character-code specific test cases, refer to BidiCharacterTest.txt.
# Implementations are expected to correctly cover all test cases in both
# test files.
#
# The test cases in this file are further limited in the following ways:
#
# - The Bidi_Class B (Paragraph_Separator) only appears as the last
#   character in a sequence. Thus, each sequence is assumed to consist of
#   only one paragraph. Implementations may need extra testing for rule P1
#   of the UBA.
#
# - For the application of rules L1 and L2, it is assumed that all the
#   characters in the input would be rendered on a single line, with no line
#   breaks.
#
# - Implementation of rules L3 and L4 is platform- and character-specific
#   and test cases for it are not provided in this data file.
#
#
# Format:
#
# All tokens may be separated by whitespaces (space or tab). There are three kinds of lines:
# Levels, Reorder, and data.
#
# A Levels line indicates that all following data lines, up to the next Levels line,
# have the same resulting ordering levels. It has the following format:
#
# @Levels: <levels>
#
#    <levels> =     An ordered space-delimited list of numbers indicating the resulting levels
#                   for each input property value. The UBA does not assign levels to certain values;
#                   those are indicated with an x. See the note below.
# Examples:
#   @Levels:    1 0
#   @Levels:    x 1 x 2
#
# A Reorder line indicates that all following data lines, up to the next Reorder line,
# have the same resulting reordering. It has the following format:
#
# @Reorder: <ordering>
#
#    <ordering> =   An ordered space-delimited list of numbers indicating the resulting
#                   visual ordering from left to right. The numbers are zero-based, and
#                   are indexes into the input string. Items with a level of x are skipped.
#                   Thus "1 0" indicates what would happen with input of "L R" and an RTL
#                   paragraph direction.
# Example:
#   @Reorder:    1 0
#   @Reorder:    3 1
#
# A data line has the following format:
# <input> ; <bitset>
#   <input>  =      An ordered list of BIDI property values
#   <bitset> =      A hex bitset for paragraph levels (P): 1 = auto-LTR, 2 = LTR, 4 = RTL
#                   Auto-LTR (standard BIDI) uses the first L/R/AL character, and is LTR if none is found.
# Example:
#    L LRE R R; 7
#    L LRE R AL; 7
#
# Any other line starting with @ is to be ignored (this allows some degree of forward compatibility).
#
# Usage:
#
# - If the implementation API allows a list of bidi property values as input:
#
#   For each of the paragraph levels in the bitset:
#     Find the levels in each line, and compare that to the last @Levels values.
#       If they are different, the test fails.
#     Reorder the elements, and compare to the @Reorder values.
#       If they are different, the test fails.
#
# - If the implementation allows for a character string as input,
#   randomly pick characters from those with the same Bidi_Class values,
#   and test the reordering as above.
#
# Note that the UBA doesn't specify the output level or order of certain characters,
# such as LRO. These are omitted from the reordered output. Thus the following two
# input lines have the same result (0), since the LRE (item 1) is omitted on the second line.
#
#   L; 7
#   L LRE; 7
#

@Levels:	2
@Reorder:	0
L; 4
EN; 4
AN; 7

#Count:	3